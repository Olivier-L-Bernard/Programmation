# -*- coding: utf-8 -*-
"""
Created on Fri Dec  9 17:44:55 2016

@author: bero2203
"""

import numpy as np
import scipy
from scipy.optimize import curve_fit
from matplotlib import pyplot as plt
import sys
import unicodedata

def calcul2(Vp, e_m):

    M= 0.00612 
    
    r = 0.0312
    dist = 2*r
    
    B0 = 0.25*M
    E0 = Vp/dist
    
    v0 = np.sqrt(2*e_m * 179.266)
    p0 = E0 / B0
    
    #print((v0/p0))    
    
    return (v0/p0)

def calcul(Vp,e_m):

    M= 0.00612 
    
    r = 0.0312
    dist = r
    
    B0 = 0.25*M
    E0 = Vp/dist
    
    omega = e_m*B0
    v0 = np.sqrt(2*e_m * 179.9)
    p0 = E0 / B0
    print(p0)
    
    #print(np.tan((v0- omega*r)/p0))    
    
    return np.tan((v0- omega*r)/p0)
    
def graphique():

    
    
    Vp = float(input("Entrer la diff√©rence de potentiel de la plaque r'$V_{p}$' :"))
    
    r = 0.0312
    dist = r 
    e_m = -1.7*10**11
    em = np.linspace( 1.3*10**11,1.9*10**11,1000)
    
    plt.plot(em , calcul2(Vp, em), '-k' ,markersize=3)
    plt.plot(em , calcul(Vp,em), '-k' ,markersize=3)
            
    #ajoutx = (max(varx)/dist-min(varx)/dist)/12
    #xmaximum = max(varx)/dist + ajoutx
    #xminimum = min(varx)/dist - ajoutx
                   
    plt.xlabel(r'$\frac{v_{o}}{\rho_{o}}$ (V/m)')
    plt.ylabel(r'$tan (\frac{v_{o} - \omega r}{\rho_{o}})$')
    plt.legend( loc='best', numpoints= 1, frameon = False)
    #plt.xlim(1.7*10**11, 1.9*10**11)
    #plt.gca().invert_xaxis()
    #plt.gca().invert_yaxis()
    result = scipy.optimize.brentq(calcul2(Vp,em),1.3*10**11, 1.9*10**11)
    print(result)
    #plt.ylim(-10,10)
    #plt.annotate(r'$-\frac{\pi}{2}$ ' ,xy = (-70,-1.56), xytext=(-70,-1.57))
    #nom_graph = input ("Entrer le nom du graphique :")
    #plt.savefig(nom_graph+'.pdf')
    plt.show()
    
    main() # retour au main
    
def main():
    commande= input("Que voulez-vous faire (G: tracer de graphique, S: arret du programme): ")

    if (commande == 'G' or commande == 'g' ):
        graphique()

    if (commande == 'S' or commande == 's'):
        sys.exit()
        
if __name__ == '__main__':
  main() 
