# -*- coding: utf-8 -*-
'''
Auteur: Équipe 5
Date : 10 décembre 2016
Entree: Clavier
Sortie: Moniteur
Programme: Programme pour tracer l'équation trenscendante et la résoudre
'''

import numpy as np
import scipy
from scipy import misc
from scipy.optimize import curve_fit
from matplotlib import pyplot as plt
import sys
import unicodedata

def calcul2(e_m,Vp):
    
    M= 0.00612 
    r = 0.0312
    
    B0 = 0.25*M
    E0 = Vp/r
    
    v0 = np.sqrt(2*e_m * -179.9) #Utilisation du courant d'accélération de -179.9V
    p0 = E0 / B0   
    
    return (v0/p0)

def calcul(e_m, Vp):

    M= 0.00612 
    r = 0.0312
    
    B0 = 0.25*M
    E0 = Vp/r
    
    omega = e_m*B0
    
    v0 = np.sqrt(2*e_m * -179.9) #Utilisation du courant d'accélération de -179.9V
    p0 = E0 / B0
 
    #x = -1.70*10*11
    if Vp >= -30:
        resu = []
        for x in e_m :
            result = -(np.tan((np.sqrt(2*x * -179.9)- x*B0*r)/p0))  + (np.sqrt(2*x* -179.9)/p0)
            if result > -4.23527907883810*10**(-1000): #Condition pour trouver où les fonction se croisent
                if x < -1.7*10**11 and x > -1.85*10**11: #rejet des points trop bas ou trop hauts
                    resu.append(x) #Prise en note de chacun des point en x qui respèctent la conditions
                if x < -1.78*10**11:
                    break
        x += -(1.9*10**11-1.7*10**11)/1000
        
    if Vp < -30:
        resu = []
        for x in e_m :
            result = -(np.tan((np.sqrt(2*x * -179.9)- x*B0*r)/p0))  + (np.sqrt(2*x* -179.9)/p0)
            if result > -4.23527907883810*10**(-1000): #Condition pour trouver où les fonction se croisent
                if x > -1.9*10**11: #rejet des points trop bas ou trop hauts
                    resu.append(x) #Prise en note de chacun des point en x qui respèctent la conditions
                if x < -1.78*10**11:
                    break
        x += -(1.9*10**11-1.7*10**11)/1000

    x0 = sum(resu)/len(resu)
    print("Le point en x où les courbes se croisent :" ,x0)
    
    fn= lambda x : np.tan((np.sqrt(2*x * -179.9)- x*B0*r)/p0) #Fonction à "dérivé"
    g = scipy.optimize.root(fn , [0.95*x0, x0, 1.10*x0]) #Calculs des points qui sont solutions

    solutionx = sum(g.x)/len(g.x) #Fait la moyenne sur la somme des solutions
    print("Le rapport e/m que donne cette méthode est:" ,solutionx, "C/kg")  
    
    return (np.tan((v0- omega*r)/p0))
      
def graphique():
   
    r = 0.0312
    dist = r 
    em = np.linspace( -1.3*10**11,-1.9*10**11,1000)
    Vp = float(input("Entrer la différence de potentiel de la plaque (Vp). Attention, mettez une valeur négative! :"))

    
    
    Y = calcul(em, Vp)
    Yn = calcul2(em,Vp)
    plt.plot(em , Yn, '-b' ,markersize=3, label = r'$\frac{v_{0}}{p_{0}}$')
    plt.plot(em , Y, '-k' ,markersize=3, label = r'$\tan(\frac{v_{0}- \omega r}{p_{0}})$')          
    plt.xlabel(r'$\frac{v_{o}}{\rho_{o}}$')
    plt.ylabel(r'$tan (\frac{v_{o} - \omega r}{\rho_{o}})$')
    plt.legend( loc='best', numpoints= 1, frameon = False)

    #plt.xlim(-1.85*10**11, -1.6*10**11)
    if max(Y) > 200:
        plt.ylim(-200, 200)

    if max(Y) < 100:
        plt.ylim(-1.5*max(Y), max(Y))
            
    #nom_graph = input ("Entrer le nom du graphique :")
    #plt.savefig(nom_graph+'.pdf')
    plt.gca().invert_xaxis()
    plt.gca().invert_yaxis()
    plt.show()
    
    main() # retour au main
    
def main():
    commande= input("Que voulez-vous faire (G: tracer de graphique, S: arret du programme): ")

    if (commande == 'G' or commande == 'g' ):
        graphique()

    if (commande == 'S' or commande == 's'):
        sys.exit()
        
if __name__ == '__main__':
  main() 

